#!/usr/bin/env bash

# Unoffical Bash "strict mode"
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail
#ORIGINAL_IFS=$IFS
IFS=$'\t\n' # Stricter IFS settings

install_rebar() {
  local install_type=$1
  local version=$2
  local install_path=$3
  local tmp_download_dir
  local source_path

  if [ "${TMPDIR:-}" = "" ]; then
    tmp_download_dir="$(mktemp -d -t rebar_build_XXXXXX)"
  else
    tmp_download_dir="${TMPDIR%/}"
  fi

  source_path="$(get_download_file_path "$install_type" "$version" "$tmp_download_dir")"

  download_source "$install_type" "$version" "$source_path" || exit 1

  # Running this in a subshell because we don't to disturb the current
  # working directory.
  (
    cd "$(dirname "$source_path")" || exit 1
    tar zxvf "$source_path" &>/dev/null || exit 1

    cd "$(untar_path "$install_type" "$version" "$tmp_download_dir")" || exit 1

    # Build rebar
    ./bootstrap || exit 1

    # Copy rebar into the bin directory inside the asdf install directory
    mkdir -p "$install_path/bin/" || exit 1

    if version_3x_or_greater "$version"; then
      local rebar3_binary="_build/default/bin/rebar3"

      if [ ! -f $rebar3_binary ]; then
        rebar3_binary="_build/prod/bin/rebar3"
      fi

      cp "$rebar3_binary" "$install_path/bin/" || exit 1
    else
      cp rebar "$install_path/bin/" || exit 1
    fi
  )
}

download_source() {
  local install_type=$1
  local version=$2
  local download_path=$3
  local download_url

  download_url="$(get_download_url "$install_type" "$version")"

  curl -Lo "$download_path" "$download_url"
}

get_download_file_path() {
  local install_type=$1
  local version=$2
  local tmp_download_dir=$3
  local rebar_version

  rebar_version="$(get_rebar_version "$version")"

  local pkg_name="${rebar_version}.tar.gz"

  echo "$tmp_download_dir/$pkg_name"
}

untar_path() {
  local install_type=$1
  local version=$2
  local tmp_download_dir=$3
  local rebar_version
  local dir_name

  rebar_version=$(get_rebar_version "$version")

  if [ "${install_type}" = "version" ]; then
    if version_3x_or_greater "$version"; then
      dir_name="rebar3-${version}"
    else
      dir_name="rebar-${version}"
    fi
  fi

  echo "$tmp_download_dir/$dir_name"
}

get_download_url() {
  local install_type=$1
  local version=$2

  if version_3x_or_greater "$version"; then
    echo "https://github.com/erlang/rebar3/archive/${version}.tar.gz"
  else
    echo "https://github.com/rebar/rebar/archive/${version}.tar.gz"
  fi
}

get_rebar_version() {
  IFS='-' read -ra version_info <<<"$1"

  # Lua
  if [ "${#version_info[@]}" -eq 1 ]; then
    echo "${version_info[0]}"
  else
    echo "${version_info[0]}-${version_info[1]}"
  fi
}

version_3x_or_greater() {
  version=$1
  IFS='.' read -ra version_array <<<"$version"
  major_version="${version_array[0]}"

  if ((major_version >= 3)); then
    return 0
  else
    return 1
  fi
}

install_rebar "$ASDF_INSTALL_TYPE" "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH"
